// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: nodeum/plugins/v1/mover.proto

package pluginsv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MoverPluginService_BeforeStorageBooked_FullMethodName = "/nodeum.plugins.v1.MoverPluginService/BeforeStorageBooked"
)

// MoverPluginServiceClient is the client API for MoverPluginService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MoverPluginServiceClient interface {
	// Before the storage (source or destination) is reserved and initialized
	BeforeStorageBooked(ctx context.Context, in *BeforeStorageBookedRequest, opts ...grpc.CallOption) (*BeforeStorageBookedResponse, error)
}

type moverPluginServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMoverPluginServiceClient(cc grpc.ClientConnInterface) MoverPluginServiceClient {
	return &moverPluginServiceClient{cc}
}

func (c *moverPluginServiceClient) BeforeStorageBooked(ctx context.Context, in *BeforeStorageBookedRequest, opts ...grpc.CallOption) (*BeforeStorageBookedResponse, error) {
	out := new(BeforeStorageBookedResponse)
	err := c.cc.Invoke(ctx, MoverPluginService_BeforeStorageBooked_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MoverPluginServiceServer is the server API for MoverPluginService service.
// All implementations must embed UnimplementedMoverPluginServiceServer
// for forward compatibility
type MoverPluginServiceServer interface {
	// Before the storage (source or destination) is reserved and initialized
	BeforeStorageBooked(context.Context, *BeforeStorageBookedRequest) (*BeforeStorageBookedResponse, error)
	mustEmbedUnimplementedMoverPluginServiceServer()
}

// UnimplementedMoverPluginServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMoverPluginServiceServer struct {
}

func (UnimplementedMoverPluginServiceServer) BeforeStorageBooked(context.Context, *BeforeStorageBookedRequest) (*BeforeStorageBookedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BeforeStorageBooked not implemented")
}
func (UnimplementedMoverPluginServiceServer) mustEmbedUnimplementedMoverPluginServiceServer() {}

// UnsafeMoverPluginServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MoverPluginServiceServer will
// result in compilation errors.
type UnsafeMoverPluginServiceServer interface {
	mustEmbedUnimplementedMoverPluginServiceServer()
}

func RegisterMoverPluginServiceServer(s grpc.ServiceRegistrar, srv MoverPluginServiceServer) {
	s.RegisterService(&MoverPluginService_ServiceDesc, srv)
}

func _MoverPluginService_BeforeStorageBooked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BeforeStorageBookedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoverPluginServiceServer).BeforeStorageBooked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoverPluginService_BeforeStorageBooked_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoverPluginServiceServer).BeforeStorageBooked(ctx, req.(*BeforeStorageBookedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MoverPluginService_ServiceDesc is the grpc.ServiceDesc for MoverPluginService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MoverPluginService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nodeum.plugins.v1.MoverPluginService",
	HandlerType: (*MoverPluginServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BeforeStorageBooked",
			Handler:    _MoverPluginService_BeforeStorageBooked_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nodeum/plugins/v1/mover.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: nodeum/plugins/v1/finalizer.proto

package pluginsv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FinalizerPluginService_AfterResultReceived_FullMethodName = "/nodeum.plugins.v1.FinalizerPluginService/AfterResultReceived"
	FinalizerPluginService_AfterTaskExecuted_FullMethodName   = "/nodeum.plugins.v1.FinalizerPluginService/AfterTaskExecuted"
)

// FinalizerPluginServiceClient is the client API for FinalizerPluginService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FinalizerPluginServiceClient interface {
	// After a result has been received and before it's being handled by finalizer.
	// Progress results are excluded.
	AfterResultReceived(ctx context.Context, in *AfterResultReceivedRequest, opts ...grpc.CallOption) (*AfterResultReceivedResponse, error)
	// After the task has been executed
	AfterTaskExecuted(ctx context.Context, in *AfterTaskExecutedRequest, opts ...grpc.CallOption) (*AfterTaskExecutedResponse, error)
}

type finalizerPluginServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFinalizerPluginServiceClient(cc grpc.ClientConnInterface) FinalizerPluginServiceClient {
	return &finalizerPluginServiceClient{cc}
}

func (c *finalizerPluginServiceClient) AfterResultReceived(ctx context.Context, in *AfterResultReceivedRequest, opts ...grpc.CallOption) (*AfterResultReceivedResponse, error) {
	out := new(AfterResultReceivedResponse)
	err := c.cc.Invoke(ctx, FinalizerPluginService_AfterResultReceived_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *finalizerPluginServiceClient) AfterTaskExecuted(ctx context.Context, in *AfterTaskExecutedRequest, opts ...grpc.CallOption) (*AfterTaskExecutedResponse, error) {
	out := new(AfterTaskExecutedResponse)
	err := c.cc.Invoke(ctx, FinalizerPluginService_AfterTaskExecuted_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FinalizerPluginServiceServer is the server API for FinalizerPluginService service.
// All implementations must embed UnimplementedFinalizerPluginServiceServer
// for forward compatibility
type FinalizerPluginServiceServer interface {
	// After a result has been received and before it's being handled by finalizer.
	// Progress results are excluded.
	AfterResultReceived(context.Context, *AfterResultReceivedRequest) (*AfterResultReceivedResponse, error)
	// After the task has been executed
	AfterTaskExecuted(context.Context, *AfterTaskExecutedRequest) (*AfterTaskExecutedResponse, error)
	mustEmbedUnimplementedFinalizerPluginServiceServer()
}

// UnimplementedFinalizerPluginServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFinalizerPluginServiceServer struct {
}

func (UnimplementedFinalizerPluginServiceServer) AfterResultReceived(context.Context, *AfterResultReceivedRequest) (*AfterResultReceivedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AfterResultReceived not implemented")
}
func (UnimplementedFinalizerPluginServiceServer) AfterTaskExecuted(context.Context, *AfterTaskExecutedRequest) (*AfterTaskExecutedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AfterTaskExecuted not implemented")
}
func (UnimplementedFinalizerPluginServiceServer) mustEmbedUnimplementedFinalizerPluginServiceServer() {
}

// UnsafeFinalizerPluginServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FinalizerPluginServiceServer will
// result in compilation errors.
type UnsafeFinalizerPluginServiceServer interface {
	mustEmbedUnimplementedFinalizerPluginServiceServer()
}

func RegisterFinalizerPluginServiceServer(s grpc.ServiceRegistrar, srv FinalizerPluginServiceServer) {
	s.RegisterService(&FinalizerPluginService_ServiceDesc, srv)
}

func _FinalizerPluginService_AfterResultReceived_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AfterResultReceivedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinalizerPluginServiceServer).AfterResultReceived(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinalizerPluginService_AfterResultReceived_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinalizerPluginServiceServer).AfterResultReceived(ctx, req.(*AfterResultReceivedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinalizerPluginService_AfterTaskExecuted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AfterTaskExecutedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinalizerPluginServiceServer).AfterTaskExecuted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinalizerPluginService_AfterTaskExecuted_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinalizerPluginServiceServer).AfterTaskExecuted(ctx, req.(*AfterTaskExecutedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FinalizerPluginService_ServiceDesc is the grpc.ServiceDesc for FinalizerPluginService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FinalizerPluginService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nodeum.plugins.v1.FinalizerPluginService",
	HandlerType: (*FinalizerPluginServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AfterResultReceived",
			Handler:    _FinalizerPluginService_AfterResultReceived_Handler,
		},
		{
			MethodName: "AfterTaskExecuted",
			Handler:    _FinalizerPluginService_AfterTaskExecuted_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nodeum/plugins/v1/finalizer.proto",
}

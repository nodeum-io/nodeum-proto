// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: nodeum/plugins/v1/mover.proto

package pluginsv1

import (
	fmt "fmt"
	_ "github.com/nodeum-io/nodeum-proto/nodeum/common/v1"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for MoverPluginService service

func NewMoverPluginServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for MoverPluginService service

type MoverPluginService interface {
	// Before the storage (source or destination) is reserved and initialized
	BeforeStorageBooked(ctx context.Context, in *BeforeStorageBookedRequest, opts ...client.CallOption) (*BeforeStorageBookedResponse, error)
}

type moverPluginService struct {
	c    client.Client
	name string
}

func NewMoverPluginService(name string, c client.Client) MoverPluginService {
	return &moverPluginService{
		c:    c,
		name: name,
	}
}

func (c *moverPluginService) BeforeStorageBooked(ctx context.Context, in *BeforeStorageBookedRequest, opts ...client.CallOption) (*BeforeStorageBookedResponse, error) {
	req := c.c.NewRequest(c.name, "MoverPluginService.BeforeStorageBooked", in)
	out := new(BeforeStorageBookedResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MoverPluginService service

type MoverPluginServiceHandler interface {
	// Before the storage (source or destination) is reserved and initialized
	BeforeStorageBooked(context.Context, *BeforeStorageBookedRequest, *BeforeStorageBookedResponse) error
}

func RegisterMoverPluginServiceHandler(s server.Server, hdlr MoverPluginServiceHandler, opts ...server.HandlerOption) error {
	type moverPluginService interface {
		BeforeStorageBooked(ctx context.Context, in *BeforeStorageBookedRequest, out *BeforeStorageBookedResponse) error
	}
	type MoverPluginService struct {
		moverPluginService
	}
	h := &moverPluginServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&MoverPluginService{h}, opts...))
}

type moverPluginServiceHandler struct {
	MoverPluginServiceHandler
}

func (h *moverPluginServiceHandler) BeforeStorageBooked(ctx context.Context, in *BeforeStorageBookedRequest, out *BeforeStorageBookedResponse) error {
	return h.MoverPluginServiceHandler.BeforeStorageBooked(ctx, in, out)
}

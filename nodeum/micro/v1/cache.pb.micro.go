// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: nodeum/micro/v1/cache.proto

package microv1

import (
	fmt "fmt"
	_ "github.com/nodeum-io/nodeum-proto/nodeum/common/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for CacheService service

func NewCacheServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "CacheService.Mkdir",
			Path:    []string{"/cache/mkdir"},
			Method:  []string{"PUT"},
			Handler: "rpc",
		},
		{
			Name:    "CacheService.ReadDir",
			Path:    []string{"/cache/readdir"},
			Method:  []string{"GET"},
			Stream:  true,
			Handler: "rpc",
		},
	}
}

// Client API for CacheService service

type CacheService interface {
	Mkdir(ctx context.Context, in *MkdirRequest, opts ...client.CallOption) (*MkdirResponse, error)
	ReadDir(ctx context.Context, in *ReadDirRequest, opts ...client.CallOption) (CacheService_ReadDirService, error)
}

type cacheService struct {
	c    client.Client
	name string
}

func NewCacheService(name string, c client.Client) CacheService {
	return &cacheService{
		c:    c,
		name: name,
	}
}

func (c *cacheService) Mkdir(ctx context.Context, in *MkdirRequest, opts ...client.CallOption) (*MkdirResponse, error) {
	req := c.c.NewRequest(c.name, "CacheService.Mkdir", in)
	out := new(MkdirResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheService) ReadDir(ctx context.Context, in *ReadDirRequest, opts ...client.CallOption) (CacheService_ReadDirService, error) {
	req := c.c.NewRequest(c.name, "CacheService.ReadDir", &ReadDirRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &cacheServiceReadDir{stream}, nil
}

type CacheService_ReadDirService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseSend() error
	Close() error
	Recv() (*ReadDirResponse, error)
}

type cacheServiceReadDir struct {
	stream client.Stream
}

func (x *cacheServiceReadDir) CloseSend() error {
	return x.stream.CloseSend()
}

func (x *cacheServiceReadDir) Close() error {
	return x.stream.Close()
}

func (x *cacheServiceReadDir) Context() context.Context {
	return x.stream.Context()
}

func (x *cacheServiceReadDir) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *cacheServiceReadDir) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *cacheServiceReadDir) Recv() (*ReadDirResponse, error) {
	m := new(ReadDirResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for CacheService service

type CacheServiceHandler interface {
	Mkdir(context.Context, *MkdirRequest, *MkdirResponse) error
	ReadDir(context.Context, *ReadDirRequest, CacheService_ReadDirStream) error
}

func RegisterCacheServiceHandler(s server.Server, hdlr CacheServiceHandler, opts ...server.HandlerOption) error {
	type cacheService interface {
		Mkdir(ctx context.Context, in *MkdirRequest, out *MkdirResponse) error
		ReadDir(ctx context.Context, stream server.Stream) error
	}
	type CacheService struct {
		cacheService
	}
	h := &cacheServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "CacheService.Mkdir",
		Path:    []string{"/cache/mkdir"},
		Method:  []string{"PUT"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "CacheService.ReadDir",
		Path:    []string{"/cache/readdir"},
		Method:  []string{"GET"},
		Stream:  true,
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&CacheService{h}, opts...))
}

type cacheServiceHandler struct {
	CacheServiceHandler
}

func (h *cacheServiceHandler) Mkdir(ctx context.Context, in *MkdirRequest, out *MkdirResponse) error {
	return h.CacheServiceHandler.Mkdir(ctx, in, out)
}

func (h *cacheServiceHandler) ReadDir(ctx context.Context, stream server.Stream) error {
	m := new(ReadDirRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.CacheServiceHandler.ReadDir(ctx, m, &cacheServiceReadDirStream{stream})
}

type CacheService_ReadDirStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*ReadDirResponse) error
}

type cacheServiceReadDirStream struct {
	stream server.Stream
}

func (x *cacheServiceReadDirStream) Close() error {
	return x.stream.Close()
}

func (x *cacheServiceReadDirStream) Context() context.Context {
	return x.stream.Context()
}

func (x *cacheServiceReadDirStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *cacheServiceReadDirStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *cacheServiceReadDirStream) Send(m *ReadDirResponse) error {
	return x.stream.Send(m)
}

// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: nodeum/micro/v1/finalizer.proto

package microv1

import (
	fmt "fmt"
	_ "github.com/nodeum-io/nodeum-proto/nodeum/common/v1"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for FinalizerService service

func NewFinalizerServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for FinalizerService service

type FinalizerService interface {
	Start(ctx context.Context, in *FinalizerServiceStartRequest, opts ...client.CallOption) (*FinalizerServiceStartResponse, error)
}

type finalizerService struct {
	c    client.Client
	name string
}

func NewFinalizerService(name string, c client.Client) FinalizerService {
	return &finalizerService{
		c:    c,
		name: name,
	}
}

func (c *finalizerService) Start(ctx context.Context, in *FinalizerServiceStartRequest, opts ...client.CallOption) (*FinalizerServiceStartResponse, error) {
	req := c.c.NewRequest(c.name, "FinalizerService.Start", in)
	out := new(FinalizerServiceStartResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FinalizerService service

type FinalizerServiceHandler interface {
	Start(context.Context, *FinalizerServiceStartRequest, *FinalizerServiceStartResponse) error
}

func RegisterFinalizerServiceHandler(s server.Server, hdlr FinalizerServiceHandler, opts ...server.HandlerOption) error {
	type finalizerService interface {
		Start(ctx context.Context, in *FinalizerServiceStartRequest, out *FinalizerServiceStartResponse) error
	}
	type FinalizerService struct {
		finalizerService
	}
	h := &finalizerServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&FinalizerService{h}, opts...))
}

type finalizerServiceHandler struct {
	FinalizerServiceHandler
}

func (h *finalizerServiceHandler) Start(ctx context.Context, in *FinalizerServiceStartRequest, out *FinalizerServiceStartResponse) error {
	return h.FinalizerServiceHandler.Start(ctx, in, out)
}

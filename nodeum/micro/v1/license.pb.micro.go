// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: nodeum/micro/v1/license.proto

package microv1

import (
	fmt "fmt"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	proto "google.golang.org/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for LicenseService service

func NewLicenseServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "LicenseService.ShowLicense",
			Path:    []string{"/license"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "LicenseService.UpdateLicense",
			Path:    []string{"/license"},
			Method:  []string{"PUT"},
			Handler: "rpc",
		},
	}
}

// Client API for LicenseService service

type LicenseService interface {
	// ShowLicense shows details about the current license
	ShowLicense(ctx context.Context, in *ShowLicenseRequest, opts ...client.CallOption) (*ShowLicenseResponse, error)
	// UpdateLicense updates the current license
	UpdateLicense(ctx context.Context, in *UpdateLicenseRequest, opts ...client.CallOption) (*UpdateLicenseResponse, error)
}

type licenseService struct {
	c    client.Client
	name string
}

func NewLicenseService(name string, c client.Client) LicenseService {
	return &licenseService{
		c:    c,
		name: name,
	}
}

func (c *licenseService) ShowLicense(ctx context.Context, in *ShowLicenseRequest, opts ...client.CallOption) (*ShowLicenseResponse, error) {
	req := c.c.NewRequest(c.name, "LicenseService.ShowLicense", in)
	out := new(ShowLicenseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *licenseService) UpdateLicense(ctx context.Context, in *UpdateLicenseRequest, opts ...client.CallOption) (*UpdateLicenseResponse, error) {
	req := c.c.NewRequest(c.name, "LicenseService.UpdateLicense", in)
	out := new(UpdateLicenseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LicenseService service

type LicenseServiceHandler interface {
	// ShowLicense shows details about the current license
	ShowLicense(context.Context, *ShowLicenseRequest, *ShowLicenseResponse) error
	// UpdateLicense updates the current license
	UpdateLicense(context.Context, *UpdateLicenseRequest, *UpdateLicenseResponse) error
}

func RegisterLicenseServiceHandler(s server.Server, hdlr LicenseServiceHandler, opts ...server.HandlerOption) error {
	type licenseService interface {
		ShowLicense(ctx context.Context, in *ShowLicenseRequest, out *ShowLicenseResponse) error
		UpdateLicense(ctx context.Context, in *UpdateLicenseRequest, out *UpdateLicenseResponse) error
	}
	type LicenseService struct {
		licenseService
	}
	h := &licenseServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "LicenseService.ShowLicense",
		Path:    []string{"/license"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "LicenseService.UpdateLicense",
		Path:    []string{"/license"},
		Method:  []string{"PUT"},
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&LicenseService{h}, opts...))
}

type licenseServiceHandler struct {
	LicenseServiceHandler
}

func (h *licenseServiceHandler) ShowLicense(ctx context.Context, in *ShowLicenseRequest, out *ShowLicenseResponse) error {
	return h.LicenseServiceHandler.ShowLicense(ctx, in, out)
}

func (h *licenseServiceHandler) UpdateLicense(ctx context.Context, in *UpdateLicenseRequest, out *UpdateLicenseResponse) error {
	return h.LicenseServiceHandler.UpdateLicense(ctx, in, out)
}

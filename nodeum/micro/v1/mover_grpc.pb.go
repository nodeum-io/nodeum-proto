// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: nodeum/micro/v1/mover.proto

package microv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MoverService_Start_FullMethodName    = "/nodeum.micro.v1.MoverService/Start"
	MoverService_Pause_FullMethodName    = "/nodeum.micro.v1.MoverService/Pause"
	MoverService_Resume_FullMethodName   = "/nodeum.micro.v1.MoverService/Resume"
	MoverService_Stop_FullMethodName     = "/nodeum.micro.v1.MoverService/Stop"
	MoverService_Request_FullMethodName  = "/nodeum.micro.v1.MoverService/Request"
	MoverService_Requests_FullMethodName = "/nodeum.micro.v1.MoverService/Requests"
)

// MoverServiceClient is the client API for MoverService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MoverServiceClient interface {
	// Starts a task execution on the mover
	Start(ctx context.Context, in *MoverServiceStartRequest, opts ...grpc.CallOption) (*MoverServiceStartResponse, error)
	Pause(ctx context.Context, in *MoverServicePauseRequest, opts ...grpc.CallOption) (*MoverServicePauseResponse, error)
	Resume(ctx context.Context, in *MoverServiceResumeRequest, opts ...grpc.CallOption) (*MoverServiceResumeResponse, error)
	Stop(ctx context.Context, in *MoverServiceStopRequest, opts ...grpc.CallOption) (*MoverServiceStopResponse, error)
	// Executes a single request on the mover
	Request(ctx context.Context, in *MoverServiceRequestRequest, opts ...grpc.CallOption) (MoverService_RequestClient, error)
	Requests(ctx context.Context, opts ...grpc.CallOption) (MoverService_RequestsClient, error)
}

type moverServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMoverServiceClient(cc grpc.ClientConnInterface) MoverServiceClient {
	return &moverServiceClient{cc}
}

func (c *moverServiceClient) Start(ctx context.Context, in *MoverServiceStartRequest, opts ...grpc.CallOption) (*MoverServiceStartResponse, error) {
	out := new(MoverServiceStartResponse)
	err := c.cc.Invoke(ctx, MoverService_Start_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moverServiceClient) Pause(ctx context.Context, in *MoverServicePauseRequest, opts ...grpc.CallOption) (*MoverServicePauseResponse, error) {
	out := new(MoverServicePauseResponse)
	err := c.cc.Invoke(ctx, MoverService_Pause_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moverServiceClient) Resume(ctx context.Context, in *MoverServiceResumeRequest, opts ...grpc.CallOption) (*MoverServiceResumeResponse, error) {
	out := new(MoverServiceResumeResponse)
	err := c.cc.Invoke(ctx, MoverService_Resume_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moverServiceClient) Stop(ctx context.Context, in *MoverServiceStopRequest, opts ...grpc.CallOption) (*MoverServiceStopResponse, error) {
	out := new(MoverServiceStopResponse)
	err := c.cc.Invoke(ctx, MoverService_Stop_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moverServiceClient) Request(ctx context.Context, in *MoverServiceRequestRequest, opts ...grpc.CallOption) (MoverService_RequestClient, error) {
	stream, err := c.cc.NewStream(ctx, &MoverService_ServiceDesc.Streams[0], MoverService_Request_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &moverServiceRequestClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MoverService_RequestClient interface {
	Recv() (*MoverServiceRequestResponse, error)
	grpc.ClientStream
}

type moverServiceRequestClient struct {
	grpc.ClientStream
}

func (x *moverServiceRequestClient) Recv() (*MoverServiceRequestResponse, error) {
	m := new(MoverServiceRequestResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *moverServiceClient) Requests(ctx context.Context, opts ...grpc.CallOption) (MoverService_RequestsClient, error) {
	stream, err := c.cc.NewStream(ctx, &MoverService_ServiceDesc.Streams[1], MoverService_Requests_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &moverServiceRequestsClient{stream}
	return x, nil
}

type MoverService_RequestsClient interface {
	Send(*MoverServiceRequestsRequest) error
	Recv() (*MoverServiceRequestsResponse, error)
	grpc.ClientStream
}

type moverServiceRequestsClient struct {
	grpc.ClientStream
}

func (x *moverServiceRequestsClient) Send(m *MoverServiceRequestsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *moverServiceRequestsClient) Recv() (*MoverServiceRequestsResponse, error) {
	m := new(MoverServiceRequestsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MoverServiceServer is the server API for MoverService service.
// All implementations must embed UnimplementedMoverServiceServer
// for forward compatibility
type MoverServiceServer interface {
	// Starts a task execution on the mover
	Start(context.Context, *MoverServiceStartRequest) (*MoverServiceStartResponse, error)
	Pause(context.Context, *MoverServicePauseRequest) (*MoverServicePauseResponse, error)
	Resume(context.Context, *MoverServiceResumeRequest) (*MoverServiceResumeResponse, error)
	Stop(context.Context, *MoverServiceStopRequest) (*MoverServiceStopResponse, error)
	// Executes a single request on the mover
	Request(*MoverServiceRequestRequest, MoverService_RequestServer) error
	Requests(MoverService_RequestsServer) error
	mustEmbedUnimplementedMoverServiceServer()
}

// UnimplementedMoverServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMoverServiceServer struct {
}

func (UnimplementedMoverServiceServer) Start(context.Context, *MoverServiceStartRequest) (*MoverServiceStartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedMoverServiceServer) Pause(context.Context, *MoverServicePauseRequest) (*MoverServicePauseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pause not implemented")
}
func (UnimplementedMoverServiceServer) Resume(context.Context, *MoverServiceResumeRequest) (*MoverServiceResumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Resume not implemented")
}
func (UnimplementedMoverServiceServer) Stop(context.Context, *MoverServiceStopRequest) (*MoverServiceStopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedMoverServiceServer) Request(*MoverServiceRequestRequest, MoverService_RequestServer) error {
	return status.Errorf(codes.Unimplemented, "method Request not implemented")
}
func (UnimplementedMoverServiceServer) Requests(MoverService_RequestsServer) error {
	return status.Errorf(codes.Unimplemented, "method Requests not implemented")
}
func (UnimplementedMoverServiceServer) mustEmbedUnimplementedMoverServiceServer() {}

// UnsafeMoverServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MoverServiceServer will
// result in compilation errors.
type UnsafeMoverServiceServer interface {
	mustEmbedUnimplementedMoverServiceServer()
}

func RegisterMoverServiceServer(s grpc.ServiceRegistrar, srv MoverServiceServer) {
	s.RegisterService(&MoverService_ServiceDesc, srv)
}

func _MoverService_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoverServiceStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoverServiceServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoverService_Start_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoverServiceServer).Start(ctx, req.(*MoverServiceStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoverService_Pause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoverServicePauseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoverServiceServer).Pause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoverService_Pause_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoverServiceServer).Pause(ctx, req.(*MoverServicePauseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoverService_Resume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoverServiceResumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoverServiceServer).Resume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoverService_Resume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoverServiceServer).Resume(ctx, req.(*MoverServiceResumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoverService_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoverServiceStopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoverServiceServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoverService_Stop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoverServiceServer).Stop(ctx, req.(*MoverServiceStopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoverService_Request_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MoverServiceRequestRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MoverServiceServer).Request(m, &moverServiceRequestServer{stream})
}

type MoverService_RequestServer interface {
	Send(*MoverServiceRequestResponse) error
	grpc.ServerStream
}

type moverServiceRequestServer struct {
	grpc.ServerStream
}

func (x *moverServiceRequestServer) Send(m *MoverServiceRequestResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MoverService_Requests_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MoverServiceServer).Requests(&moverServiceRequestsServer{stream})
}

type MoverService_RequestsServer interface {
	Send(*MoverServiceRequestsResponse) error
	Recv() (*MoverServiceRequestsRequest, error)
	grpc.ServerStream
}

type moverServiceRequestsServer struct {
	grpc.ServerStream
}

func (x *moverServiceRequestsServer) Send(m *MoverServiceRequestsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *moverServiceRequestsServer) Recv() (*MoverServiceRequestsRequest, error) {
	m := new(MoverServiceRequestsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MoverService_ServiceDesc is the grpc.ServiceDesc for MoverService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MoverService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nodeum.micro.v1.MoverService",
	HandlerType: (*MoverServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _MoverService_Start_Handler,
		},
		{
			MethodName: "Pause",
			Handler:    _MoverService_Pause_Handler,
		},
		{
			MethodName: "Resume",
			Handler:    _MoverService_Resume_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _MoverService_Stop_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Request",
			Handler:       _MoverService_Request_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Requests",
			Handler:       _MoverService_Requests_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "nodeum/micro/v1/mover.proto",
}

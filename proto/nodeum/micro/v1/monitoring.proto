syntax = "proto3";

package nodeum.micro.v1;

option go_package = "github.com/nodeum-io/nodeum-proto/nodeum/micro/v1;microv1";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

service DebugService {
  rpc Info(InfoRequest) returns (InfoResponse) {};
  rpc Stats(StatsRequest) returns (StatsResponse) {};
}

service MonitoringService {
  // ListServices returns all registered services.
  rpc ListServices(ListServicesRequest) returns (ListServicesResponse) {
    option (google.api.http) = {
      get: "/services";
    };
  }
  // ListHosts returns information about hosts running services.
  rpc ListHosts(ListHostsRequest) returns (ListHostsResponse) {
    option (google.api.http) = {
      get: "/hosts";
    };
  }
}

message InfoRequest { }
// Description of a host
message InfoResponse {
  // Server Product UUID
  string uuid = 1;
  // Hostname
  string hostname = 2;
  // Host IP address
  string ip = 3;
  // Memory in Bytes
  int64 memory = 4;
  // Number of CPUs
  int32 cpus = 5;
  // Current time of server
  google.protobuf.Timestamp time = 6;
  // Abbreviated name of timezone
  string timezone = 7;
  // Uptime in seconds
  int64 uptime = 8;
}

message StatsRequest {
  // optional service name
  string service = 1;
}
message StatsResponse {
  // timestamp of recording
  int64 timestamp = 1;
  // unix timestamp
  int64 started = 2;
  // in seconds
  int64 uptime = 3;
  // in bytes
  int64 memory = 4;
  // num threads
  int64 threads = 5;
  // total gc in nanoseconds
  int64 gc = 6;
  // total number of requests
  int64 requests = 7;
  // total number of errors
  int64 errors = 8;
}

// Description of a service
message Service {
  // A single Node running the service
  message Node {
    string id = 1;
    // Address used to communicate with this service
    string address = 2;
    // Statistics about the running service
    StatsResponse stats = 3;

    enum Status {
      STATUS_UNSPECIFIED = 0;
      STATUS_ALIVE = 1;
      STATUS_DEAD = 2;
    }
    // Current status of the service
    Status status = 4;
  }

  // Name of the service
  string name = 1;
  // Version of the service
  string version = 2;
  // Instance of this service running on the same version
  repeated Node nodes = 3;
}

message ListServicesRequest {}
message ListServicesResponse {
  repeated Service services = 1;
}

message ListHostsRequest {}
message ListHostsResponse {
  repeated InfoResponse hosts = 1;
}
